{
  "epn": {
    "events": [
     
      {
        "name": "Congestion",
        "createdDate": "Sun Aug 31 2014",
        "attributes": [
          {
            "name": "Certainty",
            "type": "Double",
            "defaultValue": "1",
            "dimension": 0,
            "description": "The certainty that this event happen (value between 0 to 1)"
          },
          {
            "name": "OccurrenceTime",
            "type": "Date",
            "dimension": 0,
            "description": "No value means it equals the event detection time, other option is to use one of the defined distribution functions with parameters"
          },
          {
            "name": "ExpirationTime",
            "type": "Date",
            "dimension": 0,
            "description": "Only till this time the cost and certainty parameters of the event are valid, and only till this time a proactive action is considered"
          },
          {
            "name": "Cost",
            "type": "Double",
            "dimension": 0,
            "description": "The cost of this event occurrence. Negative if this is an opportunity"
          },
          {
            "name": "Duration",
            "type": "Double",
            "defaultValue": "0",
            "dimension": 0,
            "description": "Used in case the this event occur within an interval"
          },
          {
            "name": "location",
            "type": "String",
            "dimension": 0
          },
          {
            "name": "sensorId",
            "type": "String",
            "dimension": 0
          },
          {
            "name": "average_density",
            "type": "Double",
            "dimension": 0
          },
          {
            "name": "problem_id",
            "type": "String",
            "dimension": 0
          },
           {
            "name": "dmPartition",
            "type": "String",
            "dimension": 0
          }
        ]
      },
      {
        "name": "CoordinateRamps",
        "attributes": [
          {
            "dimension": 0,
            "description": "The certainty that this event happen (value between 0 to 1)",
            "name": "Certainty",
            "defaultValue": "1",
            "type": "Double"
          },
          {
            "dimension": 0,
            "description": "No value means it equals the event detection time, other option is to use one of the defined distribution functions with parameters",
            "name": "OccurrenceTime",
            "type": "Date"
          },
          {
            "dimension": 0,
            "description": "Only till this time the cost and certainty parameters of the event are valid, and only till this time a proactive action is considered",
            "name": "ExpirationTime",
            "type": "Date"
          },
          {
            "dimension": 0,
            "description": "The cost of this event occurrence. Negative if this is an opportunity",
            "name": "Cost",
            "type": "Double"
          },
          {
            "dimension": 0,
            "description": "Used in case the this event occur within an interval",
            "name": "Duration",
            "defaultValue": "0",
            "type": "Double"
          },
          {
            "dimension": 0,
            "name": "location",
            "type": "String"
          },
          {
            "dimension": 0,
            "name": "sensorId",
            "type": "String"
          },
          {
            "dimension": 0,
            "name": "targetOccupancy",
            "type": "Double"
          },
          {
            "dimension": 0,
            "name": "problem_id",
            "type": "String"
          },
          {
            "dimension": 0,
            "name": "dmPartition",
            "type": "String"
          }
        ],
        "createdDate": "Wed Jun 08 2016"
      },
        {
        "name": "AggregatedQueueLength",
        "createdDate": "Sun Aug 31 2014",
        "attributes": [
          {
            "name": "Certainty",
            "type": "Double",
            "defaultValue": "1",
            "dimension": 0,
            "description": "The certainty that this event happen (value between 0 to 1)"
          },
          {
            "name": "OccurrenceTime",
            "type": "Date",
            "dimension": 0,
            "description": "No value means it equals the event detection time, other option is to use one of the defined distribution functions with parameters"
          },
          {
            "name": "ExpirationTime",
            "type": "Date",
            "dimension": 0,
            "description": "Only till this time the cost and certainty parameters of the event are valid, and only till this time a proactive action is considered"
          },
          {
            "name": "Cost",
            "type": "Double",
            "dimension": 0,
            "description": "The cost of this event occurrence. Negative if this is an opportunity"
          },
          {
            "name": "Duration",
            "type": "Double",
            "defaultValue": "0",
            "dimension": 0,
            "description": "Used in case the this event occur within an interval"
          },
          
          {
            "name": "sensorId",
            "type": "String",
            "dimension": 0
          },
           {
            "name": "location",
            "type": "String",
            "dimension": 0
          },                    
           {
            "name": "dmPartition",
            "type": "String",
            "dimension": 0
          },
          {
            "name": "queueLength",
            "type": "Double",
            "dimension": 0
          },
                    {
            "name": "maxQueueLength",
            "type": "Double",
            "dimension": 0
          }
          
          
        ]
      },
              {
        "name": "PredictedRampOverflow",
        "createdDate": "Sun Aug 31 2014",
        "attributes": [
          {
            "name": "Certainty",
            "type": "Double",
            "defaultValue": "1",
            "dimension": 0,
            "description": "The certainty that this event happen (value between 0 to 1)"
          },
          {
            "name": "OccurrenceTime",
            "type": "Date",
            "dimension": 0,
            "description": "No value means it equals the event detection time, other option is to use one of the defined distribution functions with parameters"
          },
          {
            "name": "ExpirationTime",
            "type": "Date",
            "dimension": 0,
            "description": "Only till this time the cost and certainty parameters of the event are valid, and only till this time a proactive action is considered"
          },
          {
            "name": "Cost",
            "type": "Double",
            "dimension": 0,
            "description": "The cost of this event occurrence. Negative if this is an opportunity"
          },
          {
            "name": "Duration",
            "type": "Double",
            "defaultValue": "0",
            "dimension": 0,
            "description": "Used in case the this event occur within an interval"
          },
         
          {
            "name": "sensorId",
            "type": "String",
            "dimension": 0
          },                  
           {
            "name": "dmPartition",
            "type": "String",
            "dimension": 0
          },
          {
            "name": "location",
            "type": "String",
            "dimension": 0
          }
        ]
      },
            {
        "name": "ClearRampOverflow",
        "createdDate": "Sun Aug 31 2014",
        "attributes": [
          {
            "name": "Certainty",
            "type": "Double",
            "defaultValue": "1",
            "dimension": 0,
            "description": "The certainty that this event happen (value between 0 to 1)"
          },
          {
            "name": "OccurrenceTime",
            "type": "Date",
            "dimension": 0,
            "description": "No value means it equals the event detection time, other option is to use one of the defined distribution functions with parameters"
          },
          {
            "name": "ExpirationTime",
            "type": "Date",
            "dimension": 0,
            "description": "Only till this time the cost and certainty parameters of the event are valid, and only till this time a proactive action is considered"
          },
          {
            "name": "Cost",
            "type": "Double",
            "dimension": 0,
            "description": "The cost of this event occurrence. Negative if this is an opportunity"
          },
          {
            "name": "Duration",
            "type": "Double",
            "defaultValue": "0",
            "dimension": 0,
            "description": "Used in case the this event occur within an interval"
          },
          
          {
            "name": "sensorId",
            "type": "String",
            "dimension": 0
          },                  
           {
            "name": "dmPartition",
            "type": "String",
            "dimension": 0
          },
          {
            "name": "location",
            "type": "String",
            "dimension": 0
          }
        ]
      },
      {
        "name": "PredictedTrend",
        "createdDate": "Sun Aug 31 2014",
        "attributes": [
          {
            "name": "Certainty",
            "type": "Double",
            "defaultValue": "1",
            "dimension": 0,
            "description": "The certainty that this event happen (value between 0 to 1)"
          },
          {
            "name": "OccurrenceTime",
            "type": "Date",
            "dimension": 0,
            "description": "No value means it equals the event detection time, other option is to use one of the defined distribution functions with parameters"
          },
          {
            "name": "ExpirationTime",
            "type": "Date",
            "dimension": 0,
            "description": "Only till this time the cost and certainty parameters of the event are valid, and only till this time a proactive action is considered"
          },
          {
            "name": "Cost",
            "type": "Double",
            "dimension": 0,
            "description": "The cost of this event occurrence. Negative if this is an opportunity"
          },
          {
            "name": "Duration",
            "type": "Double",
            "defaultValue": "0",
            "dimension": 0,
            "description": "Used in case the this event occur within an interval"
          },
          {
            "name": "location",
            "type": "String",
            "dimension": 0
          },
		  {
            "name": "sensorId",
            "type": "String",
            "dimension": 0
          },
          {
            "name": "dmPartition",
            "type": "String",
            "dimension": 0
          },
				  		            		            
          {
            "name": "average_density",
            "type": "Double",
            "dimension": 0
          },
          {
            "name": "problem_id",
            "type": "String",
            "dimension": 0
          },
           {
            "dimension": 0,
            "name": "count",
            "type": "Integer"
          }
        ]
      },
      {
        "name": "ClearCongestion",
        "createdDate": "Sun Aug 31 2014",
        "attributes": [
          {
            "name": "Certainty",
            "type": "Double",
            "defaultValue": "1",
            "dimension": 0,
            "description": "The certainty that this event happen (value between 0 to 1)"
          },
          {
            "name": "OccurrenceTime",
            "type": "Date",
            "dimension": 0,
            "description": "No value means it equals the event detection time, other option is to use one of the defined distribution functions with parameters"
          },
          {
            "name": "ExpirationTime",
            "type": "Date",
            "dimension": 0,
            "description": "Only till this time the cost and certainty parameters of the event are valid, and only till this time a proactive action is considered"
          },
          {
            "name": "Cost",
            "type": "Double",
            "dimension": 0,
            "description": "The cost of this event occurrence. Negative if this is an opportunity"
          },
          {
            "name": "Duration",
            "type": "Double",
            "defaultValue": "0",
            "dimension": 0,
            "description": "Used in case the this event occur within an interval"
          },
          {
            "name": "location",
            "type": "String",
            "dimension": 0
          },
          {
            "name": "sensorId",
            "type": "String",
            "dimension": 0
          },
          {
            "name": "problem_id",
            "type": "String",
            "dimension": 0
          },
           {
            "name": "dmPartition",
            "type": "String",
            "dimension": 0
          }
        ]
      },
      {
        "name": "AverageOnRampValuesOverInterval",
        "createdDate": "Sun Aug 31 2014",
        "attributes": [
          {
            "name": "Certainty",
            "type": "Double",
            "defaultValue": "1",
            "dimension": 0,
            "description": "The certainty that this event happen (value between 0 to 1)"
          },
          {
            "name": "OccurrenceTime",
            "type": "Date",
            "dimension": 0,
            "description": "No value means it equals the event detection time, other option is to use one of the defined distribution functions with parameters"
          },
          {
            "name": "ExpirationTime",
            "type": "Date",
            "dimension": 0,
            "description": "Only till this time the cost and certainty parameters of the event are valid, and only till this time a proactive action is considered"
          },
          {
            "name": "Cost",
            "type": "Double",
            "dimension": 0,
            "description": "The cost of this event occurrence. Negative if this is an opportunity"
          },
          {
            "name": "Duration",
            "type": "Double",
            "defaultValue": "0",
            "dimension": 0,
            "description": "Used in case the this event occur within an interval"
          },
          {
            "name": "location",
            "type": "String",
            "dimension": 0
          },
          {
            "name": "sensorId",
            "type": "String",
            "dimension": 0
          },
          {
            "name": "average_flow",
            "type": "Double",
            "dimension": 0
          },
          {
            "name": "average_speed",
            "type": "Double",
            "dimension": 0
          },
          {
            "name": "average_occupancy",
            "type": "Double",
            "dimension": 0
          },
          {
            "name": "dmPartition",
            "type": "String",
            "dimension": 0
          },
          {
            "name": "standard_dev_flow",
            "type": "Double",
            "dimension": 0
          },
            {
            "name": "standard_dev_density",
            "type": "Double",
            "dimension": 0
          }                
          
        ]
      },
      {
        "name": "AverageOffRampValuesOverInterval",
        "createdDate": "Sun Aug 31 2014",
        "attributes": [
          {
            "name": "Certainty",
            "type": "Double",
            "defaultValue": "1",
            "dimension": 0,
            "description": "The certainty that this event happen (value between 0 to 1)"
          },
          {
            "name": "OccurrenceTime",
            "type": "Date",
            "dimension": 0,
            "description": "No value means it equals the event detection time, other option is to use one of the defined distribution functions with parameters"
          },
          {
            "name": "ExpirationTime",
            "type": "Date",
            "dimension": 0,
            "description": "Only till this time the cost and certainty parameters of the event are valid, and only till this time a proactive action is considered"
          },
          {
            "name": "Cost",
            "type": "Double",
            "dimension": 0,
            "description": "The cost of this event occurrence. Negative if this is an opportunity"
          },
          {
            "name": "Duration",
            "type": "Double",
            "defaultValue": "0",
            "dimension": 0,
            "description": "Used in case the this event occur within an interval"
          },
          {
            "name": "location",
            "type": "String",
            "dimension": 0
          },
          {
            "name": "sensorId",
            "type": "String",
            "dimension": 0
          },
          {
            "name": "average_flow",
            "type": "Double",
            "dimension": 0
          },
          {
            "name": "average_speed",
            "type": "Double",
            "dimension": 0
          },
          {
            "name": "average_occupancy",
            "type": "Double",
            "dimension": 0
          },
          {
            "name": "dmPartition",
            "type": "String",
            "dimension": 0
          },
          {
            "name": "standard_dev_flow",
            "type": "Double",
            "dimension": 0
          },
            {
            "name": "standard_dev_density",
            "type": "Double",
            "dimension": 0
          }        
          
        ]
      },
      {
        "name": "AverageDensityAndSpeedPerLocation",
        "createdDate": "Sun Aug 31 2014",
        "attributes": [
          {
            "name": "Certainty",
            "type": "Double",
            "defaultValue": "1",
            "dimension": 0,
            "description": "The certainty that this event happen (value between 0 to 1)"
          },
          {
            "name": "OccurrenceTime",
            "type": "Date",
            "dimension": 0,
            "description": "No value means it equals the event detection time, other option is to use one of the defined distribution functions with parameters"
          },
          {
            "name": "ExpirationTime",
            "type": "Date",
            "dimension": 0,
            "description": "Only till this time the cost and certainty parameters of the event are valid, and only till this time a proactive action is considered"
          },
          {
            "name": "Cost",
            "type": "Double",
            "dimension": 0,
            "description": "The cost of this event occurrence. Negative if this is an opportunity"
          },
          {
            "name": "Duration",
            "type": "Double",
            "defaultValue": "0",
            "dimension": 0,
            "description": "Used in case the this event occur within an interval"
          },
          {
            "name": "location",
            "type": "String",
            "dimension": 0
          },
          {
            "name": "average_flow",
            "type": "Double",
            "dimension": 0
          },
          {
            "name": "density",
            "type": "Double",
            "dimension": 0
          },
          {
            "name": "average_density",
            "type": "Double",
            "dimension": 0
          },
          {
            "name": "average_speed",
            "type": "Double",
            "dimension": 0
          },
          {
            "name": "average_occupancy",
            "type": "Double",
            "dimension": 0
          },
          {
            "name": "lane",
            "type": "String",
            "dimension": 0
          },
           {
            "name": "timestamp",
            "type": "Date",
            "dimension": 0
          },
          
		  {
            "name": "sensorId",
            "type": "String",
            "dimension": 0
          },
          {
            "name": "dmPartition",
            "type": "String",
            "dimension": 0
          }
		 	            		                                
             
        ]
      },
      {
        "name": "AverageDensityAndSpeedPerLocationOverInterval",
        "createdDate": "Sun Aug 31 2014",
        "attributes": [
          {
            "name": "Certainty",
            "type": "Double",
            "defaultValue": "1",
            "dimension": 0,
            "description": "The certainty that this event happen (value between 0 to 1)"
          },
          {
            "name": "OccurrenceTime",
            "type": "Date",
            "dimension": 0,
            "description": "No value means it equals the event detection time, other option is to use one of the defined distribution functions with parameters"
          },
          {
            "name": "ExpirationTime",
            "type": "Date",
            "dimension": 0,
            "description": "Only till this time the cost and certainty parameters of the event are valid, and only till this time a proactive action is considered"
          },
          {
            "name": "Cost",
            "type": "Double",
            "dimension": 0,
            "description": "The cost of this event occurrence. Negative if this is an opportunity"
          },
          {
            "name": "Duration",
            "type": "Double",
            "defaultValue": "0",
            "dimension": 0,
            "description": "Used in case the this event occur within an interval"
          },
          {
            "name": "location",
            "type": "String",
            "dimension": 0
          },
          {
            "name": "sensorId",
            "type": "String",
            "dimension": 0
          },
          {
            "name": "average_flow",
            "type": "Double",
            "dimension": 0
          },
          {
            "name": "average_occupancy",
            "type": "Double",
            "dimension": 0
          },
          {
            "name": "average_speed",
            "type": "Double",
            "dimension": 0
          },
           {
            "name": "dmPartition",
            "type": "String",
            "dimension": 0
          },
          {
            "name": "standard_dev_flow",
            "type": "Double",
            "dimension": 0
          },
            {
            "name": "standard_dev_density",
            "type": "Double",
            "dimension": 0
          }        
        ]
      }   
    ],
    
    "epas": [      
      {
        "name": "CongestionEPA",
        "createdDate": "Mon Nov 10 2014",
        "epaType": "Aggregate",
        "context": "CompositeMonitoringCongestion",
        "inputEvents": [
          {
            "name": "AverageDensityAndSpeedPerLocation",
            "filterExpression": "(!EqualsIgnoreCase(AverageDensityAndSpeedPerLocation.lane,'onramp')) AND (!EqualsIgnoreCase(AverageDensityAndSpeedPerLocation.lane,'offramp')) AND (!EqualsIgnoreCase(AverageDensityAndSpeedPerLocation.lane,'queue')) AND (AverageDensityAndSpeedPerLocation.average_speed != -1) AND (AverageDensityAndSpeedPerLocation.average_occupancy > 0.45) AND (AverageDensityAndSpeedPerLocation.average_speed < 40)",
            "consumptionPolicy": "Consume",
            "instanceSelectionPolicy": "First"
          }
        ],
        "computedVariables": [
         {
            "name": "Count",
            "aggregationType": "Count",
            "AverageDensityAndSpeedPerLocation": "1"
          },
           {
            "name": "DensityAverage",
            "aggregationType": "Average",
            "AverageDensityAndSpeedPerLocation": "AverageDensityAndSpeedPerLocation.density"
          }
         ],
          "assertion": "Count >3",
        "evaluationPolicy": "Immediate",
        "cardinalityPolicy": "Single",
        "internalSegmentation": [],
        "derivedEvents": [
          {
            "name": "Congestion",
            "reportParticipants": false,
            "expressions": {
              "Duration": "0",
              "location": "ArrayGet(AverageDensityAndSpeedPerLocation.location,0)",
              "dmPartition": "ArrayGet(AverageDensityAndSpeedPerLocation.dmPartition,0)",
              "sensorId":"context.SegmentationByProblemId",
              "average_density": "DensityAverage",
              "problem_id": "context.SegmentationByProblemId",
              "OccurrenceTime":"ArrayGet(AverageDensityAndSpeedPerLocation.OccurrenceTime,ArraySize(AverageDensityAndSpeedPerLocation.OccurrenceTime)-1)"              
            }
          }
        ],
        "derivedActions": []
      },
      {
        "name": "ClearCongestionEPA",
        "createdDate": "Mon Nov 10 2014",
        "epaType": "Aggregate",
        "context": "CompositeMonitoringClearCongestion",
        "inputEvents": [
          {
            "name": "AverageDensityAndSpeedPerLocation",
            "filterExpression": "(!EqualsIgnoreCase(AverageDensityAndSpeedPerLocation.lane,'onramp')) AND (!EqualsIgnoreCase(AverageDensityAndSpeedPerLocation.lane,'queue')) AND (!EqualsIgnoreCase(AverageDensityAndSpeedPerLocation.lane,'offramp')) AND (AverageDensityAndSpeedPerLocation.average_speed != -1) AND (AverageDensityAndSpeedPerLocation.average_occupancy < 0.3) AND (AverageDensityAndSpeedPerLocation.average_speed>80)",
            "consumptionPolicy": "Consume",
            "instanceSelectionPolicy": "First"
          }
        ],
       "computedVariables": [
          {
            "name": "Count",
            "aggregationType": "Count",
            "AverageDensityAndSpeedPerLocation": "1"
          }
         ],
         "assertion": "Count >3",
        "evaluationPolicy": "Immediate",
        "cardinalityPolicy": "Single",
        "internalSegmentation": [],
        "derivedEvents": [
          {
            "name": "ClearCongestion",
            "reportParticipants": false,
            "expressions": {
              "Duration": "0",
              "location": "ArrayGet(AverageDensityAndSpeedPerLocation.location,0)",
              "dmPartition": "ArrayGet(AverageDensityAndSpeedPerLocation.dmPartition,0)",
              "sensorId": "context.SegmentationByProblemId",
              "problem_id": "context.SegmentationByProblemId",
              "OccurrenceTime":"ArrayGet(AverageDensityAndSpeedPerLocation.OccurrenceTime,ArraySize(AverageDensityAndSpeedPerLocation.OccurrenceTime)-1)"
            }
          }
        ],
        "derivedActions": []
      },
      {
        "name": "PredictedTrendEPA",
        "createdDate": "Mon Nov 10 2014",
        "epaType": "Trend",
        "context": "CompositeMonitoringTrend",
        "inputEvents": [
          {
            "name": "AverageDensityAndSpeedPerLocation",
            "filterExpression": " (!EqualsIgnoreCase(AverageDensityAndSpeedPerLocation.lane,'onramp')) AND (!EqualsIgnoreCase(AverageDensityAndSpeedPerLocation.lane,'queue')) AND (!EqualsIgnoreCase(AverageDensityAndSpeedPerLocation.lane,'offramp')) AND (AverageDensityAndSpeedPerLocation.average_speed != -1) ",
            "expression": "AverageDensityAndSpeedPerLocation.average_density",
            "consumptionPolicy": "Reuse",
            "instanceSelectionPolicy": "First"
          }
        ],
        "computedVariables": [],
        "evaluationPolicy": "Immediate",
        "cardinalityPolicy": "Unrestricted",
        "trendN": "3",
        "trendRelation": "Increase",
        "internalSegmentation": [],
        "derivedEvents": [
          {
            "name": "PredictedTrend",
            "condition": "((GetAttribute(ArrayGet(trend.participants,ArraySize(trend.participants)-1),\"average_occupancy\") >=0.2) AND (GetAttribute(ArrayGet(trend.participants,ArraySize(trend.participants)-1),\"average_speed\") <= 50))",
            "reportParticipants": false,
            "expressions": {
              "Certainty": "if ((NOT IsWeekend(GetAttribute(ArrayGet(trend.participants,ArraySize(trend.participants)-1),\"timestamp\"))) AND ((GetHours(GetAttribute(ArrayGet(trend.participants,ArraySize(trend.participants)-1),\"timestamp\")) > 8 AND GetHours(GetAttribute(ArrayGet(trend.participants,ArraySize(trend.participants)-1),\"timestamp\")) < 9) OR (GetHours(GetAttribute(ArrayGet(trend.participants,ArraySize(trend.participants)-1),\"timestamp\")) > 17 AND GetHours(GetAttribute(ArrayGet(trend.participants,ArraySize(trend.participants)-1),\"timestamp\")) < 18))) then (if (Sigmoid(-6.667,70.086,0.447,1.010,(GetAttribute(ArrayGet(trend.participants,ArraySize(trend.participants)-1),\"average_density\")-GetAttribute(ArrayGet(trend.participants,0),\"average_density\"))/((GetAttribute(ArrayGet(trend.participants,ArraySize(trend.participants)-1),\"timestamp\")-GetAttribute(ArrayGet(trend.participants,0),\"timestamp\"))/1000),GetAttribute(ArrayGet(trend.participants,ArraySize(trend.participants)-1),\"average_density\"),trend.count)+0.1 <=1.0) then (Sigmoid(-6.667,70.086,0.447,1.010,(GetAttribute(ArrayGet(trend.participants,ArraySize(trend.participants)-1),\"average_density\")-GetAttribute(ArrayGet(trend.participants,0),\"average_density\"))/((GetAttribute(ArrayGet(trend.participants,ArraySize(trend.participants)-1),\"timestamp\")-GetAttribute(ArrayGet(trend.participants,0),\"timestamp\"))/1000),GetAttribute(ArrayGet(trend.participants,ArraySize(trend.participants)-1),\"average_density\"),trend.count)+0.1) else (1.0) endif) else (if (Sigmoid(-6.667,70.086,0.447,1.010,(GetAttribute(ArrayGet(trend.participants,ArraySize(trend.participants)-1),\"average_density\")-GetAttribute(ArrayGet(trend.participants,0),\"average_density\"))/((GetAttribute(ArrayGet(trend.participants,ArraySize(trend.participants)-1),\"timestamp\")-GetAttribute(ArrayGet(trend.participants,0),\"timestamp\"))/1000),GetAttribute(ArrayGet(trend.participants,ArraySize(trend.participants)-1),\"average_density\"),trend.count) <=1.0) then (Sigmoid(-6.667,70.086,0.447,1.010,(GetAttribute(ArrayGet(trend.participants,ArraySize(trend.participants)-1),\"average_density\")-GetAttribute(ArrayGet(trend.participants,0),\"average_density\"))/((GetAttribute(ArrayGet(trend.participants,ArraySize(trend.participants)-1),\"timestamp\")-GetAttribute(ArrayGet(trend.participants,0),\"timestamp\"))/1000),GetAttribute(ArrayGet(trend.participants,ArraySize(trend.participants)-1),\"average_density\"),trend.count)) else (1.0) endif) endif",
              "problem_id": "context.SegmentationByProblemId",
               "location": "GetAttribute(ArrayGet(trend.participants,0),\"location\")",
              "dmPartition": "GetAttribute(ArrayGet(trend.participants,0),\"dmPartition\")",
               "sensorId": "context.SegmentationByProblemId",
              "Duration": "0",
              "average_density": "GetAttribute(ArrayGet(trend.participants,ArraySize(trend.participants)-1),\"density\")",
              "OccurrenceTime": "GetAttribute(ArrayGet(trend.participants,ArraySize(trend.participants)-1),\"OccurrenceTime\")",              
              "count": "trend.count"
          	}
          }
        ],
        "derivedActions": []
      },
      {
        "name": "PredictedRampOverflowEPA",
        "createdDate": "Mon Nov 10 2014",
        "epaType": "Trend",
        "context": "CompositeRampOverflow",
        "inputEvents": [
          {
            "name": "AggregatedQueueLength",           
            "expression": "AggregatedQueueLength.queueLength",
            "consumptionPolicy": "Reuse",
            "instanceSelectionPolicy": "First"
          }
        ],
        "computedVariables": [],
        "evaluationPolicy": "Immediate",
        "cardinalityPolicy": "Unrestricted",
        "trendN": "4",
        "trendRelation": "Increase",
        "internalSegmentation": [],
        "derivedEvents": [
          {
            "name": "PredictedRampOverflow",
            "reportParticipants": false,
            "expressions": {
              "Certainty": "Sigmoid(-2.367,0.693,trend.count)",                      
              "dmPartition": "GetAttribute(ArrayGet(trend.participants,0),\"dmPartition\")",
              "location": "GetAttribute(ArrayGet(trend.participants,0),\"location\")",
               "sensorId": "context.SegmentationByProblemId",
               "OccurrenceTime": "GetAttribute(ArrayGet(trend.participants,ArraySize(trend.participants)-1),\"OccurrenceTime\")",
              "Duration": "0"              
          	}
          }
        ],
        "derivedActions": []
      },
       {
        "name": "PredictedClearRampOverflowEPA",
        "createdDate": "Mon Nov 10 2014",
        "epaType": "Trend",
        "context": "CompositeRampClearOverflow",
        "inputEvents": [
          {
            "name": "AggregatedQueueLength",           
            "expression": "AggregatedQueueLength.queueLength",
            "consumptionPolicy": "Reuse",
            "instanceSelectionPolicy": "First"
          }
        ],
        "computedVariables": [],
        "evaluationPolicy": "Deferred",
        "cardinalityPolicy": "Unrestricted",
        "trendN": "4",
        "trendRelation": "Decrease",        
        "internalSegmentation": [],
        "derivedEvents": [
          {
            "name": "ClearRampOverflow",
            "condition": "(GetAttribute(ArrayGet(trend.participants,ArraySize(trend.participants)-1),\"queueLength\") < (GetAttribute(ArrayGet(trend.participants,ArraySize(trend.participants)-1),\"maxQueueLength\")/2))",            
            "reportParticipants": false,
            "expressions": {              
              "Certainty": "1.0",                      
              "dmPartition": "GetAttribute(ArrayGet(trend.participants,0),\"dmPartition\")",
              "location": "GetAttribute(ArrayGet(trend.participants,0),\"location\")",
               "sensorId": "context.SegmentationByProblemId",
               "OccurrenceTime": "GetAttribute(ArrayGet(trend.participants,ArraySize(trend.participants)-1),\"OccurrenceTime\")",
              "Duration": "0"              
          	}
          }
        ],
        "derivedActions": []
      },
      {
        "name": "AvgOnRampEPA",
        "createdDate": "Mon Nov 10 2014",
        "epaType": "Aggregate",
        "context": "CompositeTemporalWindowsForOnRampAggregation",
        "inputEvents": [
          {
            "name": "AverageDensityAndSpeedPerLocation",
            "filterExpression": "EqualsIgnoreCase(AverageDensityAndSpeedPerLocation.lane,'onramp') || EqualsIgnoreCase(AverageDensityAndSpeedPerLocation.lane,'queue')",
            "consumptionPolicy": "Consume",
            "instanceSelectionPolicy": "First"
          }
        ],
        "computedVariables": [
          {
            "name": "AverageFlow",
            "aggregationType": "Sum",
            "AverageDensityAndSpeedPerLocation": "AverageDensityAndSpeedPerLocation.average_flow"
          },
          {
            "name": "AverageSpeed",
            "aggregationType": "Average",
            "AverageDensityAndSpeedPerLocation": "AverageDensityAndSpeedPerLocation.average_speed"
          },
           {
            "name": "AverageOccupancy",
            "aggregationType": "Average",
            "AverageDensityAndSpeedPerLocation": "AverageDensityAndSpeedPerLocation.average_occupancy"
          }
        ],
        "evaluationPolicy": "Deferred",
        "cardinalityPolicy": "Single",
        "internalSegmentation": [],
        "derivedEvents": [
          {
            "name": "AverageOnRampValuesOverInterval",
            "reportParticipants": false,
            "expressions": {
              "Duration": "0",
              "location": "ArrayGet(AverageDensityAndSpeedPerLocation.location,0)",
              "sensorId": "context.SegmentationByProblemId",
              "dmPartition": "ArrayGet(AverageDensityAndSpeedPerLocation.dmPartition,0)",
              "OccurrenceTime":"ArrayGet(AverageDensityAndSpeedPerLocation.OccurrenceTime,ArraySize(AverageDensityAndSpeedPerLocation.OccurrenceTime)-1)",
              "average_flow": "AverageFlow",             
              "average_speed": "AverageSpeed",
              "average_occupancy":"AverageOccupancy",
              "standard_dev_flow":"ArrayStandardDev(AverageDensityAndSpeedPerLocation.average_flow)",
              "standard_dev_density":"ArrayStandardDev(AverageDensityAndSpeedPerLocation.density)"              
              
            }
          }
        ],
        "derivedActions": []
      },
      {
        "name": "AvgOffRampEPA",
        "createdDate": "Mon Nov 10 2014",
        "epaType": "Aggregate",
        "context": "CompositeTemporalWindowsForOffRampAggregation",
        "inputEvents": [
          {
            "name": "AverageDensityAndSpeedPerLocation",
            "filterExpression": "EqualsIgnoreCase(AverageDensityAndSpeedPerLocation.lane,'offramp')",
            "consumptionPolicy": "Consume",
            "instanceSelectionPolicy": "First"
          }
        ],
        "computedVariables": [
          {
            "name": "AverageFlow",
            "aggregationType": "Sum",
            "AverageDensityAndSpeedPerLocation": "AverageDensityAndSpeedPerLocation.average_flow"
          },
          {
            "name": "AverageSpeed",
            "aggregationType": "Average",
            "AverageDensityAndSpeedPerLocation": "AverageDensityAndSpeedPerLocation.average_speed"
          },
           {
            "name": "AverageOccupancy",
            "aggregationType": "Average",
            "AverageDensityAndSpeedPerLocation": "AverageDensityAndSpeedPerLocation.average_occupancy"
          }
        ],
        "evaluationPolicy": "Deferred",
        "cardinalityPolicy": "Single",
        "internalSegmentation": [],
        "derivedEvents": [
          {
            "name": "AverageOffRampValuesOverInterval",
            "reportParticipants": false,
            "expressions": {
              "Duration": "0",
              "location": "ArrayGet(AverageDensityAndSpeedPerLocation.location,0)",
               "sensorId": "context.SegmentationByProblemId",
              "dmPartition": "ArrayGet(AverageDensityAndSpeedPerLocation.dmPartition,0)",
              "OccurrenceTime":"ArrayGet(AverageDensityAndSpeedPerLocation.OccurrenceTime,ArraySize(AverageDensityAndSpeedPerLocation.OccurrenceTime)-1)",
              "average_flow": "AverageFlow",             
              "average_speed": "AverageSpeed",
              "average_occupancy":"AverageOccupancy",
              "standard_dev_flow":"ArrayStandardDev(AverageDensityAndSpeedPerLocation.average_flow)",
              "standard_dev_density":"ArrayStandardDev(AverageDensityAndSpeedPerLocation.density)"
            }
          }
        ],
        "derivedActions": []
      },
      {
        "name": "AvgAggregationOverTimeEPA",
        "createdDate": "Mon Nov 10 2014",
        "epaType": "Aggregate",
        "context": "CompositeAggregatedIntervalContext",
        "inputEvents": [
          {
            "name": "AverageDensityAndSpeedPerLocation",
             "filterExpression": "(!EqualsIgnoreCase(AverageDensityAndSpeedPerLocation.lane,'offramp')) AND (!EqualsIgnoreCase(AverageDensityAndSpeedPerLocation.lane,'onramp')) AND (!EqualsIgnoreCase(AverageDensityAndSpeedPerLocation.lane,'queue'))",
            "consumptionPolicy": "Consume",
            "instanceSelectionPolicy": "First"
          }
        ],
        "computedVariables": [
          {
            "name": "AverageSpeed",
            "aggregationType": "Average",
            "AverageDensityAndSpeedPerLocation": "AverageDensityAndSpeedPerLocation.average_speed"
          },
          {
            "name": "AverageFlow",
            "aggregationType": "Sum",
            "AverageDensityAndSpeedPerLocation": "AverageDensityAndSpeedPerLocation.average_flow"
          },
           {
            "name": "AverageOccupancy",
            "aggregationType": "Average",
            "AverageDensityAndSpeedPerLocation": "AverageDensityAndSpeedPerLocation.average_occupancy"
          }
        ],
        "evaluationPolicy": "Deferred",
        "cardinalityPolicy": "Single",
        "internalSegmentation": [],
        "derivedEvents": [
          {
            "name": "AverageDensityAndSpeedPerLocationOverInterval",
            "reportParticipants": false,
            "expressions": {
              "Duration": "0",
              "location": "ArrayGet(AverageDensityAndSpeedPerLocation.location,0)",
               "sensorId": "context.SegmentationByProblemId",
              "dmPartition": "ArrayGet(AverageDensityAndSpeedPerLocation.dmPartition,0)",
              "OccurrenceTime":"ArrayGet(AverageDensityAndSpeedPerLocation.OccurrenceTime,ArraySize(AverageDensityAndSpeedPerLocation.OccurrenceTime)-1)",
              "average_flow": "AverageFlow",             
              "average_speed": "AverageSpeed",
              "average_occupancy":"AverageOccupancy",
              "standard_dev_flow":"ArrayStandardDev(AverageDensityAndSpeedPerLocation.average_flow)",
              "standard_dev_density":"ArrayStandardDev(AverageDensityAndSpeedPerLocation.density)"
            }
          }
        ],
        "derivedActions": []
      }
    ],
    "contexts": {
      "temporal": [
       
        {
          "name": "TemporalMonitoringCongestion",
          "createdDate": "Sun Nov 09 2014",
          "type": "TemporalInterval",
          "atStartup": false,
          "neverEnding": false,
          "initiators": [
            {
              "initiatorType": "Event",
              "initiatorPolicy": "Ignore",
              "name": "AverageDensityAndSpeedPerLocation"
            }
          ],
          "terminators": [
            {
              "terminatorType": "Event",
              "terminatorPolicy": "First",
              "terminationType": "Terminate",
              "name": "ClearCongestion"
            },
             {
              "terminatorType": "RelativeTime",
              "terminationType": "Terminate",
              "relativeTime": "300000"
            }
          ]
        },
        {
          "name": "TemporalMonitoringClearCongestion",
          "createdDate": "Sun Nov 09 2014",
          "type": "TemporalInterval",
          "atStartup": false,
          "neverEnding": false,
          "initiators": [
            {
              "initiatorType": "Event",
              "initiatorPolicy": "Ignore",
              "name": "Congestion"
            },
                       {
              "initiatorType": "Event",
              "initiatorPolicy": "Ignore",
              "name": "PredictedTrend"
            }
          ],
          "terminators": [
             {
              "terminatorType": "RelativeTime",
              "terminationType": "Terminate",
              "relativeTime": "300000"
            }
          ]
        },
        {
          "name": "TemporalMonitoringTrend",
          "createdDate": "Sun Nov 09 2014",
          "type": "TemporalInterval",
          "atStartup": false,
          "neverEnding": false,
          "initiators": [
            {
              "initiatorType": "Event",
              "initiatorPolicy": "Ignore",
              "name": "AverageDensityAndSpeedPerLocation"
            }
          ],
          "terminators": [
            {
              "terminatorType": "Event",
              "terminatorPolicy": "Each",
              "terminationType": "Terminate",
              "name": "Congestion"
            },
            {
              "terminatorType": "Event",
              "terminatorPolicy": "Each",
              "terminationType": "Terminate",
              "name": "ClearCongestion"
            }
          ]
        },       
         {
          "name": "TemporalMonitoringRampOverflow",
          "createdDate": "Sun Nov 09 2014",
          "type": "TemporalInterval",
          "atStartup": false,
          "neverEnding": false,
          "initiators": [
            {
              "initiatorType": "Event",
              "initiatorPolicy": "Ignore",
              "name": "AggregatedQueueLength",
              "condition": "AggregatedQueueLength.queueLength > (AggregatedQueueLength.maxQueueLength/2)"
            }
          ],
          "terminators": [
            {
              "terminatorType": "Event",
              "terminatorPolicy": "Each",
              "terminationType": "Terminate",
              "name": "ClearRampOverflow"
            },
            {
              "terminatorType": "RelativeTime",
              "terminationType": "Terminate",
              "relativeTime": "120000"
            }
          ]
        },
         {
          "name": "TemporalMonitoringClearRampOverflow",
          "createdDate": "Sun Nov 09 2014",
          "type": "TemporalInterval",
          "atStartup": false,
          "neverEnding": false,
          "initiators": [
            {
              "initiatorType": "Event",
              "initiatorPolicy": "Ignore",
              "name": "PredictedRampOverflow"
            }
          ],
          "terminators": [
           {
              "terminatorType": "RelativeTime",
              "terminationType": "Terminate",
              "relativeTime": "120000"
            }
          ]
        },
        {
          "name": "TemporalWindowsForOnRampAggregation",
          "createdDate": "Sun Nov 09 2014",
          "type": "TemporalInterval",
          "atStartup": false,
          "neverEnding": false,
          "initiators": [
            {
              "initiatorType": "Event",
              "initiatorPolicy": "Ignore",
              "name": "AverageDensityAndSpeedPerLocation",
              "condition": "EqualsIgnoreCase(AverageDensityAndSpeedPerLocation.lane,'onramp') || EqualsIgnoreCase(AverageDensityAndSpeedPerLocation.lane,'queue')"
            }
          ],
          "terminators": [
            {
              "terminatorType": "RelativeTime",
              "terminationType": "Terminate",              
              "relativeTime": "65000"
            }
          ]
        },
          {
          "name": "TemporalWindowsForOffRampAggregation",
          "createdDate": "Sun Nov 09 2014",
          "type": "TemporalInterval",
          "atStartup": false,
          "neverEnding": false,
          "initiators": [
            {
              "initiatorType": "Event",
              "initiatorPolicy": "Ignore",
              "name": "AverageDensityAndSpeedPerLocation",
              "condition": "EqualsIgnoreCase(AverageDensityAndSpeedPerLocation.lane,'offramp')"
            }
          ],
          "terminators": [
            {
              "terminatorType": "RelativeTime",
              "terminationType": "Terminate",              
              "relativeTime": "65000"
            }
          ]
        },
        {
          "name": "TemporalWindowAggregatedInterval",
          "createdDate": "Sun Nov 09 2014",
          "type": "TemporalInterval",
          "atStartup": false,
          "neverEnding": false,
          "initiators": [
            {
              "initiatorType": "Event",
              "initiatorPolicy": "Ignore",
              "name": "AverageDensityAndSpeedPerLocation",
              "condition": "((!EqualsIgnoreCase(AverageDensityAndSpeedPerLocation.lane,'offramp')) AND (!EqualsIgnoreCase(AverageDensityAndSpeedPerLocation.lane,'onramp')) AND (!EqualsIgnoreCase(AverageDensityAndSpeedPerLocation.lane,'queue')))"
            }
          ],
          "terminators": [
            {
              "terminatorType": "RelativeTime",
              "terminationType": "Terminate",            
              "relativeTime": "65000"
            }
          ]
        }
      ],
      "segmentation": [        
     
        {
          "name": "SegmentationByProblemId",
          "createdDate": "Sun Nov 09 2014",
          "participantEvents": [
            {
              "name": "Congestion",
              "expression": "Congestion.problem_id"
            },
            
            {
              "name": "PredictedTrend",
              "expression": "PredictedTrend.problem_id"
            },
            {
              "name": "ClearCongestion",
              "expression": "ClearCongestion.problem_id"
            },
            {
              "name": "AverageDensityAndSpeedPerLocation",
              "expression": " AverageDensityAndSpeedPerLocation.sensorId"
            },
            {
              "name": "AggregatedQueueLength",
              "expression": " AggregatedQueueLength.sensorId"
            },
            {
              "name": "PredictedRampOverflow",
              "expression": " PredictedRampOverflow.sensorId"
            },
             {
              "name": "ClearRampOverflow",
              "expression": " ClearRampOverflow.sensorId"
            }
          ]
        }
      ],
      "composite": [       
        {
          "name": "CompositeMonitoringCongestion",
          "createdDate": "Sun Nov 09 2014",
          "temporalContexts": [
            {
              "name": "TemporalMonitoringCongestion"
            }
          ],
          "segmentationContexts": [
            {
              "name": "SegmentationByProblemId"
            }
          ]
        },
         {
          "name": "CompositeRampOverflow",
          "createdDate": "Sun Nov 09 2014",
          "temporalContexts": [
            {
              "name": "TemporalMonitoringRampOverflow"
            }
          ],
          "segmentationContexts": [
            {
              "name": "SegmentationByProblemId"
            }
          ]
        },
        {
          "name": "CompositeRampClearOverflow",
          "createdDate": "Sun Nov 09 2014",
          "temporalContexts": [
            {
              "name": "TemporalMonitoringClearRampOverflow"
            }
          ],
          "segmentationContexts": [
            {
              "name": "SegmentationByProblemId"
            }
          ]
        },
        {
          "name": "CompositeMonitoringClearCongestion",
          "createdDate": "Sun Nov 09 2014",
          "temporalContexts": [
            {
              "name": "TemporalMonitoringClearCongestion"
            }
          ],
          "segmentationContexts": [
            {
              "name": "SegmentationByProblemId"
            }
          ]
        },
        {
          "name": "CompositeMonitoringTrend",
          "createdDate": "Sun Nov 09 2014",
          "temporalContexts": [
            {
              "name": "TemporalMonitoringTrend"
            }
          ],
          "segmentationContexts": [
            {
              "name": "SegmentationByProblemId"
            }
          ]
        },
        {
          "name": "CompositeTemporalWindowsForOnRampAggregation",
          "createdDate": "Sun Nov 09 2014",
          "temporalContexts": [
            {
              "name": "TemporalWindowsForOnRampAggregation"
            }
          ],
          "segmentationContexts": [
            {
              "name": "SegmentationByProblemId"
            }
          ]
        },
         {
          "name": "CompositeTemporalWindowsForOffRampAggregation",
          "createdDate": "Sun Nov 09 2014",
          "temporalContexts": [
            {
              "name": "TemporalWindowsForOffRampAggregation"
            }
          ],
          "segmentationContexts": [
            {
              "name": "SegmentationByProblemId"
            }
          ]
        },
        {
          "name": "CompositeAggregatedIntervalContext",
          "createdDate": "Sun Nov 09 2014",
          "temporalContexts": [
            {
              "name": "TemporalWindowAggregatedInterval"
            }
          ],
          "segmentationContexts": [
            {
              "name": "SegmentationByProblemId"
            }
          ]
        }
      ]
    },
    "consumers": 
    [
    	{
        "name": "TextConsumer",
        "createdDate": "Sun Aug 31 2014",
        "type": "File",
        "properties": [
          {
            "name": "filename",
            "value": "D:\\EP\\Projects\\EU\\SPEEDD\\usecases\\CNRS\\exampleOutput.txt"
          },
          {
            "name": "formatter",
            "value": "json"
          },
          {
            "name": "delimiter",
            "value": ";"
          },
          {
            "name": "tagDataSeparator",
            "value": "="
          },
          {
            "name": "SendingDelay",
            "value": "1000"
          },
          {
            "name": "dateFormat",
            "value": "dd/MM/yyyy HH:mm:ss"
          }
        ],
        "events": [                
          {
            "name": "PredictedTrend"
          },
          {
            "name": "CoordinateRamps"
          },
          {       
            "name": "Congestion"
          },
          {
            "name": "ClearCongestion"
          },
    	  {
            "name": "AverageOnRampValuesOverInterval"
          },
          {
            "name": "AverageDensityAndSpeedPerLocation"
          },
           {
            "name": "AverageOffRampValuesOverInterval"
          },
          
           {
            "name": "AverageDensityAndSpeedPerLocationOverInterval"
          } ,
          {
            "name": "AggregatedQueueLength"
          },
                    {
            "name": "PredictedRampOverflow"
          },
	{
            "name": "ClearRampOverflow"
          }  

   		],
        "actions": []
      }
    ],
    "producers": 
    [
      {
        "name": "TextProducer",
        "createdDate": "Sun Aug 31 2014",
        "type": "Timed",
        "properties": [
          {
            "name": "filename",
            "value": "D:/EP/Projects/Proton/MergeOpenSourceUncertaintyWorkspace/ProtonEU/SPEEDD/Grenoble/for integration (prototype demo)/2015/simulator_data_incident_enriched_timed.csv"
          },
          {
            "name": "pollingInterval",
            "value": "500"
          },
          {
            "name": "sendingDelay",
            "value": "1000"
          },
 {
            "name": "formatter",
            "value": "csv"
          },
          {
            "name": "delimiter",
            "value": ","
          },
          {
            "name": "tagDataSeparator",
            "value": "="
          },
          {
            "name": "csvEventType",
            "value": "AverageDensityAndSpeedPerLocation"
          },
          {
            "name": "csvAttributeNames",            
            "value": "timestamp,sensorId,average_speed,vehicle_count_car,vehicle_count_truck,density,density_car,density_truck,average_occupancy,average_density,average_flow,lane,location,dmPartition,queueLength,OccurrenceTime"
          },
          {
            "name": "dateFormat",                        
            "value": "yyyy-MM-dd HH:mm:ss"
          }
        ],
        "events": []
      }
    ],
    "actions": [],
    "name": "CNRSnew"
  }
}